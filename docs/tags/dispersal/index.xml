<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dispersal on Project notebook for the Invasion Heterogeneity project</title>
    <link>https://brucekendall.github.io/InvasionHet/tags/dispersal/</link>
    <description>Recent content in dispersal on Project notebook for the Invasion Heterogeneity project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brucekendall.github.io/InvasionHet/tags/dispersal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modeled Ler spread statistics</title>
      <link>https://brucekendall.github.io/InvasionHet/2022/11/07/modeled-ler-spread-statistics/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2022/11/07/modeled-ler-spread-statistics/</guid>
      <description> Warning in options(stringsAsFactors = config$as_factors): &amp;#39;options(stringsAsFactors = TRUE)&amp;#39; is deprecated and will be disabled Lss &amp;lt;- Ler_maxd_summary(Ler_sim_maxd_1000) Ler_maxd_viz(0, Lss, &amp;quot;Mean&amp;quot;) Ler_maxd_viz(0, Lss, &amp;quot;Variance&amp;quot;) Ler_maxd_viz(1, Lss, &amp;quot;Mean&amp;quot;) Ler_maxd_viz(1, Lss, &amp;quot;Variance&amp;quot;) Ler_maxd_viz(2, Lss, &amp;quot;Mean&amp;quot;) Ler_maxd_viz(2, Lss, &amp;quot;Variance&amp;quot;) Ler_maxd_viz(3, Lss, &amp;quot;Mean&amp;quot;) Ler_maxd_viz(3, Lss, &amp;quot;Variance&amp;quot;)  </description>
    </item>
    
    <item>
      <title>Drop bad RIL reps</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/11/20/drop-bad-ril-reps/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/11/20/drop-bad-ril-reps/</guid>
      <description>First, we need to make sure that we are getting enough iterates in the fit:
controls &amp;lt;- list(maxit = 1000) We also clear out reps with not enough seeds (from 5/24/19), as well as dropping the reps that won’t converge on the generalized gamma (19, 40, and 77)
n_min &amp;lt;- 10 # Set the minimum number of dispersing seeds dispersing_seeds &amp;lt;- group_by(disperseRIL, ID) %&amp;gt;% filter(Distance &amp;gt; 4) %&amp;gt;% filter(!(ID %in% c(&amp;quot;19&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;77&amp;quot;))) %&amp;gt;% summarize(tot_seeds=sum(Seedlings)) good_reps &amp;lt;- filter(dispersing_seeds, tot_seeds &amp;gt;= n_min) %&amp;gt;% pull(ID) good_reps  [1] 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 24 25 [24] 26 27 28 29 31 33 34 35 36 37 39 41 42 43 44 45 46 48 53 54 55 56 57 [47] 58 59 60 62 66 68 70 73 74 75 78 79 80 Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .</description>
    </item>
    
    <item>
      <title>Try harder on RIL dispersal</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/11/20/try-harder-on-ril-dispersal/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/11/20/try-harder-on-ril-dispersal/</guid>
      <description>BOTTOM LINE: I can’t figure out what is going on with the bad fits; there are too many layers of indirection between the inputs to fitidistr and what goes into the optimizer. So I’ll need to drop the problematic reps.
I think (from some of the error messages that pop up) that some of the issues may have to do with negative values of the spread parameter as the optimizer explores parameter space.</description>
    </item>
    
    <item>
      <title>RIL dispersal kernels</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/11/14/ril-dispersal-kernels/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/11/14/ril-dispersal-kernels/</guid>
      <description>I’m not entirely satisfied with the prior post on the RIL dispersal kernels. So let me re-run some things and see what we understand.
First, we need to make sure that we are getting enough iterates in the fit:
controls &amp;lt;- list(maxit = 1000) We also clear out reps with not enough seeds (from 5/24/19):
n_min &amp;lt;- 10 # Set the minimum number of dispersing seeds dispersing_seeds &amp;lt;- group_by(disperseRIL, ID) %&amp;gt;% filter(Distance &amp;gt; 4) %&amp;gt;% summarize(tot_seeds=sum(Seedlings)) good_reps &amp;lt;- filter(dispersing_seeds, tot_seeds &amp;gt;= n_min) %&amp;gt;% pull(ID) disperseRILgood &amp;lt;- filter(disperseRIL, ID %in% good_reps) So now fit all the reps.</description>
    </item>
    
    <item>
      <title>Beta-binomial distribution of fraction dispersing</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/05/18/beta-binomial-distribution-of-fraction-dispersing/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/05/18/beta-binomial-distribution-of-fraction-dispersing/</guid>
      <description>I never looked at how to calculate the parameters for the fraction dispersing. The trick may be the betabinomial function in the VGAM library.
The first step is to amalgamate all the dispersing seeds from disperseLer:
nondispersers &amp;lt;- subset(disperseLer, Pot == 0, c(&amp;quot;ID&amp;quot;, &amp;quot;Seedlings&amp;quot;)) dispersers &amp;lt;- filter(disperseLer, Pot == 1) %&amp;gt;% group_by(ID) %&amp;gt;% summarise(dispersers = sum(Seedlings)) disperse_num &amp;lt;- merge(nondispersers, dispersers) names(disperse_num)[2] &amp;lt;- &amp;quot;nondispersers&amp;quot; disperse_num$dispersers &amp;lt;- round(2 * disperse_num$dispersers) So now we make an intercept-only model with vgam.</description>
    </item>
    
    <item>
      <title>Final final dispersal</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/26/final-final-dispersal/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/26/final-final-dispersal/</guid>
      <description>A few things.
On further reflection, I think that I do indeed want to use multivariate normal for generating dispersal kernels. I need to find the “odd” fit and drop that from the analysis For “fitall,” I need to check the other distributions; maybe one of them is better.  Eliminate odd fit First replicate yesterday’s analysis and print them out with IDs:
disperseLer2 &amp;lt;- filter(disperseLer, ID != &amp;quot;79_0&amp;quot;, ID !</description>
    </item>
    
    <item>
      <title>Finalizing dispersal (for now)</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/25/finalizing-dispersal-for-now/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/25/finalizing-dispersal-for-now/</guid>
      <description>Time is running short for the Davis presentation. So, at least for now, I will accept the generalized gamma distribution and the subset of data to which it fits, and move forward with creating the model.
What I need to do:
 Double check that that the replicate-specific model fits better than a single set of parameters for all the data Plot the resulting dispersal kernels Plot the patterns of covariance in parameters Quantify the meta-distribution of parameters, to use in the model  Evidence of heterogeneity The replicates to which gengamma didn’t fit were 79_0 and 90_1.</description>
    </item>
    
    <item>
      <title>Robustifying the generalized gamma fit</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/22/robustifying-the-generalized-gamma-fit/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/22/robustifying-the-generalized-gamma-fit/</guid>
      <description>I’m still a bit concerned about the generalized gamma, for two reasons: am I getting good enough starting values; and why do I get errors in the function evaluation.
For the first, my previous work on moments was not helpful. So I think that the only robust approach is to start from lots of random start values. However, that brings up the second issue of rather frequent failures. I think the issue is that flexsurv is not quite standard in how it deals with edge conditions.</description>
    </item>
    
    <item>
      <title>A general moment generator</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/19/a-general-moment-generator/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/19/a-general-moment-generator/</guid>
      <description>I’m close to having the formulas needed to create an “mgengamma”, allowing us to use the method of moments to fit that distribution. But that doesn’t get us closer to a broader problem: the need to get good start values for truncated distributions, as well as, potentially, bespoke distributions such as 2Dt.
For this, I think I can write a function to generate random numbers under the distribution, then calculate the moments and return them in a form useful to the moment matching algorithm.</description>
    </item>
    
    <item>
      <title>Moments of generalized gamma</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/18/moments-of-generalized-gamma/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/18/moments-of-generalized-gamma/</guid>
      <description>The fact that we are still having trouble fitting the generalized gamma suggests that we should move to a method of moments. Because the distribution has three parameters we need three moments. Wikipedia gives the mean and variance, but not the skew; and anywy it may be easier to use raw moments.
Stacy and Mihram (1965: Technometrics 7, 349-58) give an expression for the raw moments:
\[ E(X^r) = \frac{a^r \Gamma \left[\nu + r/p \right]}{\Gamma(\nu)}.</description>
    </item>
    
    <item>
      <title>Fitting the distributions</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/17/fitting-the-distributions/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/17/fitting-the-distributions/</guid>
      <description>I’ve written the code to automatically fit all the untruncated distributions. Here it is, in helpers.R:
fit_dispersal_untruncated  function(dispersal_data, zero = 7, model_list = c(&amp;quot;hnorm&amp;quot;, &amp;quot;exp&amp;quot;, &amp;quot;lnorm&amp;quot;, &amp;quot;gamma&amp;quot;, &amp;quot;weibull&amp;quot;, &amp;quot;invgauss&amp;quot;, &amp;quot;logis&amp;quot;, &amp;quot;invgamma&amp;quot;)) { # Fit untruncated dispersal models to data # dispersal_data must be a data frame containing columns # ID, Density, Siliques, Seedlings, Distance # All data in dispersal_data are used in a single fit, so if only a single rep is to # be analyzed, it should be subset outside this function if (&amp;quot;invgauss&amp;quot; %in% model_list) library(actuar) if (&amp;quot;gengamma&amp;quot; %in% model_list) library(flexsurv) cens_data_tble &amp;lt;- cens_dispersal_data(dispersal_data, zero) result &amp;lt;- data.</description>
    </item>
    
    <item>
      <title>Half-normal distribution</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/17/half-normal-distribution/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/17/half-normal-distribution/</guid>
      <description>Last year I wrote a half-normal distribution but didn’t actually test its fitness for fitting the data. So let’s try it out.
Our usual data:
temp &amp;lt;- filter(disperseLer, ID == &amp;quot;100_0&amp;quot;) cens_data &amp;lt;- cens_dispersal_data(temp, 7) Let’s give it a try:
try(fitdistcens(cens_data, &amp;quot;hnorm&amp;quot;)) Error in computing default starting values. Nope, it needs a start value. Fortunately I already provided one in start_params()!
try(fitdistcens(cens_data, &amp;quot;hnorm&amp;quot;, start = start_params(cens_data, &amp;quot;hnorm&amp;quot;))) Fitting of the distribution &amp;#39; hnorm &amp;#39; on censored data by maximum likelihood Parameters: estimate sigma 2.</description>
    </item>
    
    <item>
      <title>Restricting the list of distributions</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/17/restricting-the-list-of-distributions/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/17/restricting-the-list-of-distributions/</guid>
      <description>I&#39;ve just realized that any dispersal distribution that I&#39;m actually going to use in the model requires the ability to generate random numbers. Thus, for the &amp;ldquo;custom&amp;rdquo; distributions I&#39;d have to write a RNG, which I really don&#39;t want to do.
So I think that means ditching the 2Dt, log-sech, and inverse power models.
If the best fit is a truncated distribution then I might need to write a simple wrapper to discard the truncated bit.</description>
    </item>
    
    <item>
      <title>Yet more on dispersal distributions</title>
      <link>https://brucekendall.github.io/InvasionHet/2019/04/16/yet-more-on-dispersal-distributions/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2019/04/16/yet-more-on-dispersal-distributions/</guid>
      <description>Once again, here’s the list of distributions, with where we are on each:
 Distributions with modes at zero:  Exponential power (generalized normal): This is in the gnorm package, and getting start values is probably nontrivial. It is defined on the whole real line, so a “sensible” value for the location parameter (\(\mu\)) is zero. It is a generalization of the normal, Laplace, and uniform distributions. It might be better just to calculate the first two directly (I’ve already written code for a half-normal, and could do the same for the Laplace) 2Dt: This requires writing a function to get the CDF by numerical integration, unless I can figure out the sense in which it is related to the t distribution.</description>
    </item>
    
    <item>
      <title>Getting start values from moments</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/11/29/getting-start-values-form-moments/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/11/29/getting-start-values-form-moments/</guid>
      <description>It is possible to get start values from the matching moments fit. For example:
library(fitdistrplus) Loading required package: MASS Loading required package: survival Loading required package: npsurv Loading required package: lsei library(actuar)  Attaching package: &amp;#39;actuar&amp;#39; The following object is masked from &amp;#39;package:grDevices&amp;#39;: cm x4 &amp;lt;- rpareto(1000, 6, 2) s4 &amp;lt;- fitdist(x4, &amp;quot;pareto&amp;quot;, &amp;quot;mme&amp;quot;, order=c(1, 2), memp=function(x, order) emm(x, order)) s4$estimate  shape scale 9.323582 3.527362  fitdist(x4, &amp;quot;pareto&amp;quot;, start = as.</description>
    </item>
    
    <item>
      <title>Vectorization in fitdistrplus</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/11/29/vectorization-in-fitdistrplus/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/11/29/vectorization-in-fitdistrplus/</guid>
      <description>I need to figure out how fitdistr is vectorizing the calls to the distribution functions, so I can appropriately build the 2Dt function and think sensibly about the truncated distributions.
The gory details are below, but in summary:
 The parameter values are never vectorized x and q (passed to ddist and pdist respectively) may be vectors x and q may have length zero (which will need to be trapped for when I’m not just passing them on to a predefined distribution) (I don’t know why!</description>
    </item>
    
    <item>
      <title>More on distributions</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/11/20/more-on-distributions/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/11/20/more-on-distributions/</guid>
      <description>temp &amp;lt;- filter(disperseLer, ID == &amp;quot;100_0&amp;quot;) cens_data &amp;lt;- cens_dispersal_data(temp, 7) Generalized gamma I’ve made a specialized start function for gengamma:
start_gengamma function (x, truncated = FALSE) { if (dim(as.matrix(x))[2] != 2) { stop(&amp;quot;Only interval-censored methods have been developed in start_gengamma&amp;quot;) } dist_list &amp;lt;- c(&amp;quot;lnorm&amp;quot;, &amp;quot;weibull&amp;quot;, &amp;quot;gamma&amp;quot;) n &amp;lt;- length(dist_list) base_fits &amp;lt;- data.frame(dist = dist_list, AIC = numeric(n), p1 = numeric(n), p2 = numeric(n), stringsAsFactors = FALSE) base_starts &amp;lt;- array(list(NULL), n) if (truncated) { stop(&amp;quot;Truncated methods have not yet been developed in start_gengamma&amp;quot;) } for (i in 1:n) { fit &amp;lt;- fitdistcens(x, base_fits$dist[i], base_starts[[i]]) base_fits$AIC[i] &amp;lt;- fit$aic base_fits$p1[i] &amp;lt;- coef(fit)[1] base_fits$p2[i] &amp;lt;- coef(fit)[2] } best &amp;lt;- base_fits[which.</description>
    </item>
    
    <item>
      <title>Likely-looking distributions</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/11/16/likely-looking-distributions/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/11/16/likely-looking-distributions/</guid>
      <description>Let’s think about which distributions could be good. We know what the (half-)normal, exponential, and log-normal look like.
Nathan et al. (2012) also suggest:
 Exponential power 2Dt Inverse power Logistic Mixture models Inverse Gaussian (Wald) Wiebull Gamma  The scaling factors in Nathan et al. are for two-dimensional dispersal expressed in radial distance (I think). They suggest that this can be converted to a “distance kernel” by multiplying by \(2\pi r\), but that doesn’t seem right for e.</description>
    </item>
    
    <item>
      <title>fitdistrplus fixed</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/11/15/fitdistrplus-fixed/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/11/15/fitdistrplus-fixed/</guid>
      <description>The developers of fitdistrplus got back to me already with a code fix. The new version (1.0-12) is available from R-forge using
install.packages(&amp;quot;fitdistrplus&amp;quot;, repos=&amp;quot;http://R-Forge.R-project.org&amp;quot;) So now with fitdistrplus loaded in global.dcf I can run
mydata &amp;lt;- rnorm(20, 0, 10) mydata_cens &amp;lt;- data.frame(left = floor(mydata), right = ceiling(mydata)) dmynorm &amp;lt;- function(x, mean, sd, log = FALSE) dnorm(x, mean, sd, log) pmynorm &amp;lt;- function(q, mean, sd, lower.tail = TRUE, log.p = FALSE) pnorm(q, mean, sd, lower.</description>
    </item>
    
    <item>
      <title>rmutil and fitdistrplus</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/10/22/rmutil-and-fitdistrplus/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/10/22/rmutil-and-fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. So the fix I did last week to computegetparam() (to allow “y” as an argument to the distribution functions) does allow fitdist to work (sort of) with the rmutil distributions. However, there can still be failures in estimatation or SE calculation, because there are a number of other ways that the rmutil distributions work differntly from the base distribution functions.</description>
    </item>
    
    <item>
      <title>Working with fitdistrcens</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/10/18/working-with-fitdistrplus/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/10/18/working-with-fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. So here’s what happens if we try to run fitdistrcens on a non-standard distribution:
library(rmutil) temp &amp;lt;- filter(disperseLer, ID == &amp;quot;100_0&amp;quot;) cens_data &amp;lt;- cens_dispersal_data(temp, 7) try(fitdistcens(cens_data, &amp;quot;ggamma&amp;quot;, start = list(s = 5, m = 4, f = 2)), outFile = stdout()) Error in checkparamlist(arg_startfix$start.arg, arg_startfix$fix.arg, : argument &amp;quot;hasnodefaultval&amp;quot; is missing, with no default Does it work with fitdist, which doesn’t account for the censoring?</description>
    </item>
    
    <item>
      <title>fitdistrplus</title>
      <link>https://brucekendall.github.io/InvasionHet/2018/10/04/fitdistrplus/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2018/10/04/fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. I’ve modified the helper functions to separate out the creation of the censored data frame from the fitting, and to allow setting the origin. Note that setting zero = 7 only looks at the runway, and allows use of non-truncated distributions when the distribution only has support for non-negative values.</description>
    </item>
    
    <item>
      <title>Distributing and accumulating dispersed seeds</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/12/27/distributing-and-accumulating-dispersed-seeds/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/12/27/distributing-and-accumulating-dispersed-seeds/</guid>
      <description>Here is what I think will be an efficient way of putting the dispersed seeds in the right place. Let relDseeds be a \((2 D_{max}+1)\times n_{pots}\) matrix giving dispersal relative to the home pot (with row Dmax + 1 being retention and rows above that being backwards dispersal). Then we can create an absolute dispersal matrix:
# Lowest index of each column of relDseeds to include in Dseeds lower &amp;lt;- pmax(1, Dmax - (1:npots) + 2) # Add an index row, available in the applied function as x[1] relDseeds&amp;lt;-rbind(1:npots, relDseeds) # Function to construct a column of Dseeds from a column of relDseeds padCol &amp;lt;- function(x, lower, Dmax, npots) { leading_zeros &amp;lt;- rep(0, max(0, x[1] - Dmax - 1)) dispersed_seeds &amp;lt;- x[-(1:lower[x[1]])] trailing_zeros &amp;lt;- rep(0, npots-x[1]) c(leading_zeros, dispersed_seeds, trailing_zeros) } # Make a list of vectors for each column of Dseeds Dseeds &amp;lt;- apply(relDseeds, 2, padCol, lower=lower, Dmax=Dmax, npots=npots) # Convert the list to a matrix Dseeds &amp;lt;- matrix(unlist(Dseeds), npots + Dmax, npots) Finally, we can get the total number of seeds dispersed to each pot using apply:</description>
    </item>
    
    <item>
      <title>Directional dispersal in Ler</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/09/29/directional-dispersal-in-ler/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/09/29/directional-dispersal-in-ler/</guid>
      <description>The correlation between the fraction dispersing and the mean dispersal distance of the dispersers could be mean one of two things:
Simulated rain that makes more seeds go makes them go further in all directions Simulated rain that makes more seeds go is pushing them in the direction of the receiving runway  This matters because in case 2, the dispersal kernel in the negative direction will, presumably, have its absolute mean reduced.</description>
    </item>
    
    <item>
      <title>Ler kernel heterogeneity</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/09/22/ler-kernel-heterogeneity/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/09/22/ler-kernel-heterogeneity/</guid>
      <description>The next steps in the Ler dispersal analysis are to confirm statistical support for among-rep heterogeneity and see if the kernel parameters are correlated with the fraction dispersing.
Housekeeping Added the functions for the truncated distributions and to fit the models to lib/helpers.R.
 Kernel heterogeneity The total AIC for the rep-specific fits was 58230.28 and 58366.17 for the normal and lognormal models, respectively.
I think that if I pass the whole data set to the analysis function it will combine all the data.</description>
    </item>
    
    <item>
      <title>Dispersal data</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/09/19/dispersal-data/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/09/19/dispersal-data/</guid>
      <description>Jenn sent info about the Ler and RIL dispersal data.
Ler  The data from the sticky paper kernels for Ler are called 2013_08_08_Exp1_Spray.csv. And I&#39;m attaching the script I used to analyze them [FitKernels_Exp1_SPRAY_aug2013.R (in Arabidopsis/analysis)].
  I fit negative exponential kernels, which I know isn&#39;t necessarily the best fit, but is what I needed for the simulations I ran (for the density dependence paper). For reasons I don&#39;t know, the mean dispersal distance on sticky paper was further than in Generation 1.</description>
    </item>
    
    <item>
      <title>Fit Ler dispersal kernels</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/09/19/fit-ler-dispersal-kernels/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/09/19/fit-ler-dispersal-kernels/</guid>
      <description>File to load Ler dispersal data Here is the new file data/disperseLer.R:
### Creates the data object disperseLer, representing the Ler dispersal experiment # Get data from Jenn&amp;#39;s file data_dir &amp;lt;- &amp;quot;~/Dropbox/Arabidopsis/analysis&amp;quot; disperseLer &amp;lt;- read.csv(file.path(data_dir, &amp;#39;2013_08_08_Exp1_Spray.csv&amp;#39;), header = TRUE) # Drop the &amp;quot;clipped&amp;quot; treatment disperseLer &amp;lt;- droplevels(subset(disperseLer, new_trt != &amp;quot;clipped&amp;quot;, drop = TRUE)) # Drop the columns with the (irrelevant) info about where the mom pots came from disperseLer &amp;lt;- disperseLer[, -c(1:4, 6)] # Clean up column names names(disperseLer) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;Pot&amp;quot;, &amp;quot;Distance&amp;quot;, &amp;quot;Seedlings&amp;quot;, &amp;quot;Siliques&amp;quot;, &amp;quot;Density&amp;quot;, &amp;quot;Treatment&amp;quot;) # Make some factor variables disperseLer$ID &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Fitting dispersal kernels</title>
      <link>https://brucekendall.github.io/InvasionHet/2017/09/13/fitting-dispersal-kernels/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brucekendall.github.io/InvasionHet/2017/09/13/fitting-dispersal-kernels/</guid>
      <description>Quick looks at dispersal. Lewis et al 2008 show how to calculate empirical moment generating functions, but I’m not sure how useful that is for us. Nathan et al. 2012 has a good review of kernels, but not much statistical info. I found Viana et al. 2016 which suggests fitting the CDF is better than fitting the PDF.
Viana also led my to the fitdistrplus package, which fits standard distributions.</description>
    </item>
    
  </channel>
</rss>