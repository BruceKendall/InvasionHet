<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ler on Project notebook for the Invasion Heterogeneity project</title>
    <link>/InvasionHet/tags/ler/</link>
    <description>Recent content in Ler on Project notebook for the Invasion Heterogeneity project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/InvasionHet/tags/ler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Moving forward in fall</title>
      <link>/InvasionHet/2019/10/22/moving-forward-in-fall/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/10/22/moving-forward-in-fall/</guid>
      <description>Warning in .load.config(override.config): Your configuration file is missing the following entries: tables_type. Defaults will be used. Warning in .load.config(override.config): Your configuration contains the following unused entries: data_tables. These will be ignored. Warning in .check.version(config): Your configuration is compatible with version 0.8.2 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.9.0. </description>
    </item>
    
    <item>
      <title>Ler sims, and RIL parameterization plans</title>
      <link>/InvasionHet/2019/05/22/ler-sims-and-ril-parameterization-plans/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/22/ler-sims-and-ril-parameterization-plans/</guid>
      <description>Ler analysis I’ve got the complete set of gen 6 spread distances now. For a few of them there are some crazy high dispersal distances, so it can be easier to trim the most extreme ones
options(tibble.print_max = Inf) Ler_spread_stats %&amp;gt;% group_by(Gap, DS, ES, KS, SS) %&amp;gt;% summarize(Mean = mean(Max_Dist), Var = var(Max_Dist)) # A tibble: 64 x 7 # Groups: Gap, DS, ES, KS [?] Gap DS ES KS SS Mean Var &amp;lt;int&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; 1 0 FALSE FALSE FALSE FALSE 14 0 2 0 FALSE FALSE FALSE TRUE 15.</description>
    </item>
    
    <item>
      <title>Distribution of Ler variability</title>
      <link>/InvasionHet/2019/05/19/distribution-of-ler-variability/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/19/distribution-of-ler-variability/</guid>
      <description>So, last night’s analysis suggests that there’s not enough spread variability in the model. But it varied from run to run. So lets do a bunch of runs using replicate and see how far off we are.
n_init &amp;lt;- 50 Ler_params$gap_size &amp;lt;- 0 controls &amp;lt;- list( n_reps = 10, DS_seeds = TRUE, ES_seeds = TRUE, kernel_stoch = TRUE, kernel_stoch_pots = TRUE, seed_sampling = TRUE, pot_width = 7 ) The iteration and analysis, as a function to pass to replicate:</description>
    </item>
    
    <item>
      <title>Plans for near-term analyses</title>
      <link>/InvasionHet/2019/05/19/plans-for-near-term-analyses/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/19/plans-for-near-term-analyses/</guid>
      <description>OK, so I’ve demonstrated that the Ler model with continuous runway generates plausible results for the mean and variance of spread, although the latter can have some really extreme values that I probably need to investigate. The substantive conclusions from turning off one type of stochasticity at a time in that model:
 Kernel stochasticity increases the mean spread rate Both kernel stochasticity and seed sampling greatly increases the variance in spread rate Both ES and DS in seed production decrease the mean spread rate, but have little impact on the variance.</description>
    </item>
    
    <item>
      <title>Beta-binomial distribution of fraction dispersing</title>
      <link>/InvasionHet/2019/05/18/beta-binomial-distribution-of-fraction-dispersing/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/18/beta-binomial-distribution-of-fraction-dispersing/</guid>
      <description>I never looked at how to calculate the parameters for the fraction dispersing. The trick may be the betabinomial function in the VGAM library.
The first step is to amalgamate all the dispersing seeds from disperseLer:
nondispersers &amp;lt;- subset(disperseLer, Pot == 0, c(&amp;quot;ID&amp;quot;, &amp;quot;Seedlings&amp;quot;)) dispersers &amp;lt;- filter(disperseLer, Pot == 1) %&amp;gt;% group_by(ID) %&amp;gt;% summarise(dispersers = sum(Seedlings)) disperse_num &amp;lt;- merge(nondispersers, dispersers) names(disperse_num)[2] &amp;lt;- &amp;quot;nondispersers&amp;quot; disperse_num$dispersers &amp;lt;- round(2 * disperse_num$dispersers) So now we make an intercept-only model with vgam.</description>
    </item>
    
    <item>
      <title>Estimating seed production with mixed effects</title>
      <link>/InvasionHet/2019/05/18/estimating-seed-production-with-mixed-effects/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/18/estimating-seed-production-with-mixed-effects/</guid>
      <description>Warning: I need to see what the “seeds” here are—they may only be home pot seeds, in which case I need to adjust the intercept (and perhaps its variance) by the fraction dispersing from the dispersal analyses.
Returning to parameter estimation for density dependent seed production… This is based primarily on the post from 5 June 2017. The main change is that I want to use mixed effects to estimate the variance due to a random effect of generation, as well as a random effect of replicate within generation.</description>
    </item>
    
    <item>
      <title>Simulated Ler variability</title>
      <link>/InvasionHet/2019/05/18/simulated-ler-variability/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/18/simulated-ler-variability/</guid>
      <description>So, we are now ready to do some analyses. Let’s look at simulated Ler mean and variability over 6 generations.
n_init &amp;lt;- 50 Ler_params$gap_size &amp;lt;- 0 controls &amp;lt;- list( n_reps = 10, DS_seeds = TRUE, ES_seeds = TRUE, kernel_stoch = TRUE, kernel_stoch_pots = TRUE, seed_sampling = TRUE, pot_width = 7 ) Adults &amp;lt;- matrix(n_init, controls$n_reps, 1) for (i in 1:6) { Adults &amp;lt;- iterate_genotype(Adults, Ler_params, controls) } Adults  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [1,] 119 182 181 192 228 277 138 219 186 113 123 60 10 [2,] 586 374 679 944 378 886 858 612 975 439 607 336 144 [3,] 112 158 108 90 123 299 220 193 94 87 40 19 6 [4,] 757 524 688 719 338 642 968 878 448 799 529 482 211 [5,] 285 353 313 461 219 389 165 401 195 461 316 210 64 [6,] 342 661 743 608 924 649 811 811 551 485 398 731 311 [7,] 351 539 524 630 437 756 376 703 373 613 296 316 103 [8,] 331 464 288 314 282 442 442 439 482 339 200 179 50 [9,] 229 231 300 188 240 115 134 112 197 136 130 52 28 [10,] 307 580 424 688 416 636 756 386 444 393 340 139 58 [,14] [,15] [,16] [,17] [1,] 2 0 0 0 [2,] 28 13 1 0 [3,] 0 0 0 0 [4,] 115 22 9 1 [5,] 207 41 20 3 [6,] 321 155 60 12 [7,] 10 0 0 0 [8,] 20 2 3 0 [9,] 6 0 0 0 [10,] 13 2 0 0 The densities do not seem to be getting nearly large enough.</description>
    </item>
    
    <item>
      <title>Model iteration complete</title>
      <link>/InvasionHet/2019/05/16/model-iteration-complete/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/05/16/model-iteration-complete/</guid>
      <description>Over the past few weeks I’ve finished writing and testing the dispersal modules, and have a complete model for iterating multiple reps for a single genotype. I’ve also done a bunch of debugging, most of which centered on dealing with situations where the number of adults or seeds were zero, or in the first generation where one of the array dimensions was one. I’ve set it up so that the “total” number of adults can be passed in separately, to allow this same routine to be used for each genotype in the multi-RIL simulations.</description>
    </item>
    
    <item>
      <title>Final final dispersal</title>
      <link>/InvasionHet/2019/04/26/final-final-dispersal/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/26/final-final-dispersal/</guid>
      <description>A few things.
On further reflection, I think that I do indeed want to use multivariate normal for generating dispersal kernels. I need to find the “odd” fit and drop that from the analysis For “fitall,” I need to check the other distributions; maybe one of them is better.  Eliminate odd fit First replicate yesterday’s analysis and print them out with IDs:
disperseLer2 &amp;lt;- filter(disperseLer, ID != &amp;quot;79_0&amp;quot;, ID !</description>
    </item>
    
    <item>
      <title>Finalizing dispersal (for now)</title>
      <link>/InvasionHet/2019/04/25/finalizing-dispersal-for-now/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/25/finalizing-dispersal-for-now/</guid>
      <description>Time is running short for the Davis presentation. So, at least for now, I will accept the generalized gamma distribution and the subset of data to which it fits, and move forward with creating the model.
What I need to do:
 Double check that that the replicate-specific model fits better than a single set of parameters for all the data Plot the resulting dispersal kernels Plot the patterns of covariance in parameters Quantify the meta-distribution of parameters, to use in the model  Evidence of heterogeneity The replicates to which gengamma didn’t fit were 79_0 and 90_1.</description>
    </item>
    
    <item>
      <title>Fitting the distributions</title>
      <link>/InvasionHet/2019/04/17/fitting-the-distributions/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/17/fitting-the-distributions/</guid>
      <description>I’ve written the code to automatically fit all the untruncated distributions. Here it is, in helpers.R:
fit_dispersal_untruncated  function(dispersal_data, zero = 7, model_list = c(&amp;quot;hnorm&amp;quot;, &amp;quot;exp&amp;quot;, &amp;quot;lnorm&amp;quot;, &amp;quot;gamma&amp;quot;, &amp;quot;weibull&amp;quot;, &amp;quot;invgauss&amp;quot;, &amp;quot;logis&amp;quot;, &amp;quot;invgamma&amp;quot;)) { # Fit untruncated dispersal models to data # dispersal_data must be a data frame containing columns # ID, Density, Siliques, Seedlings, Distance # All data in dispersal_data are used in a single fit, so if only a single rep is to # be analyzed, it should be subset outside this function if (&amp;quot;invgauss&amp;quot; %in% model_list) library(actuar) if (&amp;quot;gengamma&amp;quot; %in% model_list) library(flexsurv) cens_data_tble &amp;lt;- cens_dispersal_data(dispersal_data, zero) result &amp;lt;- data.</description>
    </item>
    
    <item>
      <title>Half-normal distribution</title>
      <link>/InvasionHet/2019/04/17/half-normal-distribution/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/17/half-normal-distribution/</guid>
      <description>Last year I wrote a half-normal distribution but didn’t actually test its fitness for fitting the data. So let’s try it out.
Our usual data:
temp &amp;lt;- filter(disperseLer, ID == &amp;quot;100_0&amp;quot;) cens_data &amp;lt;- cens_dispersal_data(temp, 7) Let’s give it a try:
try(fitdistcens(cens_data, &amp;quot;hnorm&amp;quot;)) Error in computing default starting values. Nope, it needs a start value. Fortunately I already provided one in start_params()!
try(fitdistcens(cens_data, &amp;quot;hnorm&amp;quot;, start = start_params(cens_data, &amp;quot;hnorm&amp;quot;))) Fitting of the distribution &amp;#39; hnorm &amp;#39; on censored data by maximum likelihood Parameters: estimate sigma 2.</description>
    </item>
    
    <item>
      <title>Restricting the list of distributions</title>
      <link>/InvasionHet/2019/04/17/restricting-the-list-of-distributions/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/17/restricting-the-list-of-distributions/</guid>
      <description>I&amp;rsquo;ve just realized that any dispersal distribution that I&amp;rsquo;m actually going to use in the model requires the ability to generate random numbers. Thus, for the &amp;ldquo;custom&amp;rdquo; distributions I&amp;rsquo;d have to write a RNG, which I really don&amp;rsquo;t want to do.
So I think that means ditching the 2Dt, log-sech, and inverse power models.
If the best fit is a truncated distribution then I might need to write a simple wrapper to discard the truncated bit.</description>
    </item>
    
    <item>
      <title>Yet more on dispersal distributions</title>
      <link>/InvasionHet/2019/04/16/yet-more-on-dispersal-distributions/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2019/04/16/yet-more-on-dispersal-distributions/</guid>
      <description>Once again, here’s the list of distributions, with where we are on each:
 Distributions with modes at zero:  Exponential power (generalized normal): This is in the gnorm package, and getting start values is probably nontrivial. It is defined on the whole real line, so a “sensible” value for the location parameter (\(\mu\)) is zero. It is a generalization of the normal, Laplace, and uniform distributions. It might be better just to calculate the first two directly (I’ve already written code for a half-normal, and could do the same for the Laplace) 2Dt: This requires writing a function to get the CDF by numerical integration, unless I can figure out the sense in which it is related to the t distribution.</description>
    </item>
    
    <item>
      <title>rmutil and fitdistrplus</title>
      <link>/InvasionHet/2018/10/22/rmutil-and-fitdistrplus/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2018/10/22/rmutil-and-fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. So the fix I did last week to computegetparam() (to allow “y” as an argument to the distribution functions) does allow fitdist to work (sort of) with the rmutil distributions. However, there can still be failures in estimatation or SE calculation, because there are a number of other ways that the rmutil distributions work differntly from the base distribution functions.</description>
    </item>
    
    <item>
      <title>Working with fitdistrcens</title>
      <link>/InvasionHet/2018/10/18/working-with-fitdistrplus/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2018/10/18/working-with-fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. So here’s what happens if we try to run fitdistrcens on a non-standard distribution:
library(rmutil) temp &amp;lt;- filter(disperseLer, ID == &amp;quot;100_0&amp;quot;) cens_data &amp;lt;- cens_dispersal_data(temp, 7) try(fitdistcens(cens_data, &amp;quot;ggamma&amp;quot;, start = list(s = 5, m = 4, f = 2)), outFile = stdout()) Error in checkparamlist(arg_startfix$start.arg, arg_startfix$fix.arg, : argument &amp;quot;hasnodefaultval&amp;quot; is missing, with no default Does it work with fitdist, which doesn’t account for the censoring?</description>
    </item>
    
    <item>
      <title>fitdistrplus</title>
      <link>/InvasionHet/2018/10/04/fitdistrplus/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2018/10/04/fitdistrplus/</guid>
      <description>Warning in .check.version(config): Your configuration is compatible with version 0.8 of the ProjectTemplate package. Please run ProjectTemplate::migrate.project() to migrate to the installed version 0.8.2. I’ve modified the helper functions to separate out the creation of the censored data frame from the fitting, and to allow setting the origin. Note that setting zero = 7 only looks at the runway, and allows use of non-truncated distributions when the distribution only has support for non-negative values.</description>
    </item>
    
    <item>
      <title>Revisiting plans, and wrestling with seed stochasticity</title>
      <link>/InvasionHet/2017/10/23/revisiting-plans-and-wrestling-with-seed-stochasticity/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/10/23/revisiting-plans-and-wrestling-with-seed-stochasticity/</guid>
      <description>Focus on Ler? As I look at various pieces of the model (which I’ve started to assemble in lib/model.R), I realize that there are a sufficient number of ways in which the RIL data are different (and not yet analyzed) that I may find it challenging to exactly mirror the Ler model. In particular, I’m going to find it rather challenging (I think) to estimate the environmental stochasticity in seed production among generations and replicates.</description>
    </item>
    
    <item>
      <title>Model planning</title>
      <link>/InvasionHet/2017/10/02/model-planning/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/10/02/model-planning/</guid>
      <description>Conceptual overview The model has two fundamental steps:
Seed production Seed dispersal  Seed production is density dependent, with a Gompertz deterministic skeleton: \[\begin{equation} \log(S_{g,t,x}) = a_g + b_g \log(N_{g,t,x}), \end{equation}\] where \(S\) is seed number and \(N\) is adult number; \(g\) is genotype, \(t\) is generation and \(x\) is location. In addition, there is demographic stochasticity (probably Poisson, but need to check); temporal environmental stochasticity; and among-replicate environmental stochasticity. Need to check how well correlated the latter are among RILs.</description>
    </item>
    
    <item>
      <title>Directional dispersal in Ler</title>
      <link>/InvasionHet/2017/09/29/directional-dispersal-in-ler/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/09/29/directional-dispersal-in-ler/</guid>
      <description>The correlation between the fraction dispersing and the mean dispersal distance of the dispersers could be mean one of two things:
Simulated rain that makes more seeds go makes them go further in all directions Simulated rain that makes more seeds go is pushing them in the direction of the receiving runway  This matters because in case 2, the dispersal kernel in the negative direction will, presumably, have its absolute mean reduced.</description>
    </item>
    
    <item>
      <title>Ler kernel heterogeneity</title>
      <link>/InvasionHet/2017/09/22/ler-kernel-heterogeneity/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/09/22/ler-kernel-heterogeneity/</guid>
      <description>The next steps in the Ler dispersal analysis are to confirm statistical support for among-rep heterogeneity and see if the kernel parameters are correlated with the fraction dispersing.
Housekeeping Added the functions for the truncated distributions and to fit the models to lib/helpers.R.
 Kernel heterogeneity The total AIC for the rep-specific fits was 58230.28 and 58366.17 for the normal and lognormal models, respectively.
I think that if I pass the whole data set to the analysis function it will combine all the data.</description>
    </item>
    
    <item>
      <title>Dispersal data</title>
      <link>/InvasionHet/2017/09/19/dispersal-data/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/09/19/dispersal-data/</guid>
      <description>Jenn sent info about the Ler and RIL dispersal data.
Ler  The data from the sticky paper kernels for Ler are called 2013_08_08_Exp1_Spray.csv. And I&amp;rsquo;m attaching the script I used to analyze them [FitKernels_Exp1_SPRAY_aug2013.R (in Arabidopsis/analysis)].
I fit negative exponential kernels, which I know isn&amp;rsquo;t necessarily the best fit, but is what I needed for the simulations I ran (for the density dependence paper). For reasons I don&amp;rsquo;t know, the mean dispersal distance on sticky paper was further than in Generation 1.</description>
    </item>
    
    <item>
      <title>Fit Ler dispersal kernels</title>
      <link>/InvasionHet/2017/09/19/fit-ler-dispersal-kernels/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/InvasionHet/2017/09/19/fit-ler-dispersal-kernels/</guid>
      <description>File to load Ler dispersal data Here is the new file data/disperseLer.R:
### Creates the data object disperseLer, representing the Ler dispersal experiment # Get data from Jenn&amp;#39;s file data_dir &amp;lt;- &amp;quot;~/Dropbox/Arabidopsis/analysis&amp;quot; disperseLer &amp;lt;- read.csv(file.path(data_dir, &amp;#39;2013_08_08_Exp1_Spray.csv&amp;#39;), header = TRUE) # Drop the &amp;quot;clipped&amp;quot; treatment disperseLer &amp;lt;- droplevels(subset(disperseLer, new_trt != &amp;quot;clipped&amp;quot;, drop = TRUE)) # Drop the columns with the (irrelevant) info about where the mom pots came from disperseLer &amp;lt;- disperseLer[, -c(1:4, 6)] # Clean up column names names(disperseLer) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;Pot&amp;quot;, &amp;quot;Distance&amp;quot;, &amp;quot;Seedlings&amp;quot;, &amp;quot;Siliques&amp;quot;, &amp;quot;Density&amp;quot;, &amp;quot;Treatment&amp;quot;) # Make some factor variables disperseLer$ID &amp;lt;- as.</description>
    </item>
    
  </channel>
</rss>